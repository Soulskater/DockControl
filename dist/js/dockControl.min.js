angular.module("DockControl",["Attribute.Directives"]).constant("$alignment",{horizontal:"horizontal",vertical:"vertical",middle:"middle"}).constant("$orientation",{left:"left",right:"right",top:"top",bottom:"bottom",center:"center"}).directive("dock",["DockControl.PathService",function(t){return{restrict:"AE",replace:!0,transclude:!0,templateUrl:t.templatesBaseUrl+"dock.tmpl.html",scope:{},controller:"DockCtrl",link:function(t){function e(t){var e=0,n=0;do t.offset()&&(e+=t.offset().top||0,n+=t.offset().left||0),t=t.parent();while(t.length>0);return{top:e,left:n}}t.offset=e($(".panel-container"))}}}]),angular.module("Attribute.Directives",[]).directive("width",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({width:n.width})}}}]).directive("height",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({height:n.height})}}}]).directive("minWidth",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({minWidth:n.minWidth})}}}]).directive("minHeight",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({minHeight:n.minHeight})}}}]).directive("elementLeave",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){var i=!1,o=function(r){r.target===e[0]||$(r.target).closest(e).length>0||(t.$apply(function(){t.$eval(n.elementLeave,{$event:r})}),i=!1,$(document).unbind("click",o))},r=function(){i=!0,$(document).click(o)};e.click(r),t.$on("$destroy",function(){$(document).unbind("click",o),e.unbind("click",r)})}}}]),angular.module("DockControl").controller("DockCtrl",["$scope","$orientation","$alignment",function(t,e,n){function i(e){linq(t.panels).where(function(t){return t.align!==e.align}).forEach(function(t){(!t.docked||t.docked&&t.index<e.index)&&(t[e.orientation]=e.docked?e.size:0)}),t.sizeChanged=!t.sizeChanged}this.addPanel=function(e){t.panels.push(e)},this.panelDockedChanged=function(e){e.docked&&(linq(t.panels).where(function(t){return t!==e&&t.orientation===e.orientation}).forEach(function(t){t.docked=!1,t.collapsed=!0}),e.setToDefault()),i(e)},this.panelCollapseChanged=function(){},t.$orientation=e,t.panels=[],t.drag=function(o){var r=linq(t.panels).firstOrDefault(function(t){return t.dragging});if(r){switch(r.align){case n.horizontal:r.size=r.orientation===e.left?o.clientX-t.offset.left+5:$(o.currentTarget).width()-o.clientX-t.offset.left+5;break;case n.vertical:r.size=r.orientation===e.top?o.clientY-t.offset.left:$(o.currentTarget).height()-o.clientY-t.offset.left}linq(t.panels).forEach(function(t){i(t)})}},t.endDrag=function(){linq(t.panels).forEach(function(t){t.dragging=!1})}}]),angular.module("DockControl").controller("PanelCtrl",["$scope","$alignment","$orientation",function(t,e,n){function i(){return t.orientation===n.left||t.orientation===n.right?e.horizontal:t.orientation===n.top||t.orientation===n.bottom?e.vertical:e.middle}t.$align=e,t.$orientation=n,t.docked=!1,t.collapsed=!1,t.dragging=!1,t.header="",t.align=i(t.orientation),t.orientation===n.center&&(t.align=e.middle),t.startDrag=function(){t.dragging=!0},t.panelExpand=function(){t.collapsed=!1},t.panelLeave=function(){t.docked||(t.collapsed=!0)},t.setToDefault=function(){t.left="",t.right="",t.top="",t.bottom=""},t.setStyle=function(){return{width:t.align===e.horizontal?t.size:"",height:t.align===e.vertical?t.size:"",left:t.left,right:t.right,top:t.top,bottom:t.bottom}}}]),angular.module("DockControl").directive("panel",["DockControl.PathService",function(t){return{restrict:"AE",require:"^dock",replace:!0,transclude:!0,scope:{size:"=",minSize:"=",index:"@",orientation:"@"},templateUrl:t.templatesBaseUrl+"panel.tmpl.html",controller:"PanelCtrl",link:function(t,e,n,i){i.addPanel(t),t.$watch("docked",function(e){void 0!==e&&i.panelDockedChanged(t)}),t.docked="true"===n.docked?!0:!1,t.toggleCollapse=function(){t.collapsed=!t.collapsed,i.panelCollapseChanged(t)}}}}]).directive("header",["DockControl.PathService",function(t){return{restrict:"AE",replace:!0,transclude:!0,require:"^panel",templateUrl:t.templatesBaseUrl+"header.tmpl.html",link:function(t,e){t.docked=!1,t.toggleDock=function(){t.$parent.docked=!t.$parent.docked},t.$parent.header=e.text()}}}]).directive("content",["DockControl.PathService",function(t){return{restrict:"AE",replace:!0,transclude:!0,require:"^panel",templateUrl:t.templatesBaseUrl+"content.tmpl.html",link:function(t){t.hasHeader=""!==t.$parent.header}}}]);var scripts=document.getElementsByTagName("script"),currentScriptPath=scripts[scripts.length-1].src,dockControlRootPath=currentScriptPath.split("js/")[0];angular.module("DockControl").service("DockControl.PathService",[function(){return{templatesBaseUrl:dockControlRootPath+"templates/"}}]);
//# sourceMappingURL=data:application/json;base64,