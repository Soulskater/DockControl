angular.module("DockControl",["Attribute.Directives"]).constant("$alignment",{horizontal:"horizontal",vertical:"vertical"}).constant("$orientation",{left:"left",right:"right",top:"top",bottom:"bottom"}).directive("dock",[function(){return{restrict:"AE",replace:!0,transclude:!0,templateUrl:"templates/dock.tmpl.html",controller:"DockCtrl",link:function(t){function e(t){var e=0,n=0;do t.offset()&&(e+=t.offset().top||0,n+=t.offset().left||0),t=t.parent();while(t.length>0);return{top:e,left:n}}t.offset=e($(".panel-container"))}}}]),angular.module("Attribute.Directives",[]).directive("width",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({width:n.width})}}}]).directive("height",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({height:n.height})}}}]).directive("minWidth",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({minWidth:n.minWidth})}}}]).directive("minHeight",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({minHeight:n.minHeight})}}}]).directive("elementLeave",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){var i=!1,o=function(l){l.target===e[0]||$(l.target).closest(e).length>0||(t.$apply(function(){t.$eval(n.elementLeave,{$event:l})}),i=!1,$(document).unbind("click",o))},l=function(){i=!0,$(document).click(o)};e.click(l),t.$on("$destroy",function(){$(document).unbind("click",o),e.unbind("click",l)})}}}]),angular.module("DockControl").controller("DockCtrl",["$scope","$orientation","$alignment",function(t,e,n){function i(n){linq(t.panels).where(function(t){return t.align!==n.align}).forEach(function(t){(!t.docked||t.docked&&t.index<n.index)&&(n.orientation===e.left||n.orientation===e.top?t.start=n.docked?n.size:0:t.end=n.docked?n.size:0)})}this.addPanel=function(e){t.panels.push(e)},this.panelDockedChanged=function(t){t.docked&&(t.start=0,t.end=0),i(t)},this.panelCollapseChanged=function(e){linq(t.panels).forEach(function(t){t!==e&&t.orientation===e.orientation&&(t.collapsed=!0)})},t.$orientation=e,t.panels=[],t.drag=function(o){var l=linq(t.panels).firstOrDefault(function(t){return t.dragging});if(l){switch(l.align){case n.horizontal:l.size=l.orientation===e.left?o.clientX-t.offset.left+5:$(o.currentTarget).width()-o.clientX-t.offset.left+5;break;case n.vertical:l.size=l.orientation===e.top?o.clientY-t.offset.left:$(o.currentTarget).height()-o.clientY-t.offset.left}linq(t.panels).forEach(function(t){i(t)})}},t.endDrag=function(){linq(t.panels).forEach(function(t){t.dragging=!1})}}]),angular.module("DockControl").controller("PanelCtrl",["$scope","$alignment","$orientation",function(t,e,n){this.toggleDock=function(){t.toggleDock()},this.toggleCollapse=function(){t.toggleCollapse()},this.setHeader=function(e){t.header=e},t.toggleDock=function(){t.docked=!t.docked},t.$align=e,t.$orientation=n,t.docked=!1,t.collapsed=!1,t.dragging=!1,t.header="",t.align=t.orientation===n.left||t.orientation===n.right?e.horizontal:e.vertical,t.start=0,t.end=0,t.startDrag=function(){t.dragging=!0},t.panelExpand=function(){t.collapsed=!1},t.panelLeave=function(){t.docked||(t.collapsed=!0)},t.setStyle=function(){return{width:t.align===e.horizontal?t.size:"",height:t.align===e.vertical?t.size:"",left:t.align===e.vertical?t.start:"",right:t.align===e.vertical?t.end:"",top:t.align===e.horizontal?t.start:"",bottom:t.align===e.horizontal?t.end:""}}}]),angular.module("DockControl").directive("panel",[function(){return{restrict:"AE",require:"^dock",replace:!0,transclude:!0,scope:{size:"=",minSize:"=",index:"@",docked:"=",orientation:"@"},templateUrl:"templates/panel.tmpl.html",controller:"PanelCtrl",link:function(t,e,n,i){i.addPanel(t),t.$watch("docked",function(e){void 0!==e&&i.panelDockedChanged(t)}),t.toggleCollapse=function(){t.collapsed=!t.collapsed,i.panelCollapseChanged(t)}}}}]).directive("header",[function(){return{restrict:"AE",replace:!0,transclude:!0,require:"^panel",templateUrl:"templates/header.tmpl.html",link:function(t,e,n,i){t.docked=!1,t.toggleDock=function(){i.toggleDock(),t.docked=!t.docked},t.toggleCollapse=function(){i.toggleCollapse()},i.setHeader(e.text())}}}]).directive("content",[function(){return{restrict:"AE",replace:!0,transclude:!0,require:"^panel",templateUrl:"templates/content.tmpl.html",link:function(){}}}]);
//# sourceMappingURL=data:application/json;base64,