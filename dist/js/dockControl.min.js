angular.module("DockControl",["Attribute.Directives"]).constant("$alignment",{horizontal:"horizontal",vertical:"vertical",middle:"middle"}).constant("$orientation",{left:"left",right:"right",top:"top",bottom:"bottom",center:"center"}).directive("dock",["DockControl.PathService",function(t){return{restrict:"AE",replace:!0,transclude:!0,templateUrl:t.templatesBaseUrl+"dock.tmpl.html",scope:{sizeChanged:"="},controller:"DockCtrl",link:function(t){function e(t){var e=0,n=0;do t.offset()&&(e+=t.offset().top||0,n+=t.offset().left||0),t=t.parent();while(t.length>0);return{top:e,left:n}}t.offset=e($(".panel-container"))}}}]),angular.module("Attribute.Directives",[]).directive("width",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({width:n.width})}}}]).directive("height",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({height:n.height})}}}]).directive("minWidth",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({minWidth:n.minWidth})}}}]).directive("minHeight",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){e.css({minHeight:n.minHeight})}}}]).directive("elementLeave",[function(){return{restrict:"A",replace:!0,link:function(t,e,n){var o=!1,i=function(r){r.target===e[0]||$(r.target).closest(e).length>0||(t.$apply(function(){t.$eval(n.elementLeave,{$event:r})}),o=!1,$(document).unbind("click",i))},r=function(){o=!0,$(document).click(i)};e.click(r),t.$on("$destroy",function(){$(document).unbind("click",i),e.unbind("click",r)})}}}]),angular.module("DockControl").controller("DockCtrl",["$scope","$orientation","$alignment",function(t,e,n){function o(e){linq(t.panels).where(function(t){return t.align!==e.align}).forEach(function(t){(!t.docked||t.docked&&t.index<e.index)&&(t[e.orientation]=e.docked?e.size:0)})}this.addPanel=function(e){t.panels.push(e)},this.panelDockedChanged=function(t){t.docked&&t.setToDefault(),o(t)},this.panelCollapseChanged=function(){},t.$orientation=e,t.panels=[],t.drag=function(i){var r=linq(t.panels).firstOrDefault(function(t){return t.dragging});if(r){switch(r.align){case n.horizontal:r.size=r.orientation===e.left?i.clientX-t.offset.left+5:$(i.currentTarget).width()-i.clientX-t.offset.left+5;break;case n.vertical:r.size=r.orientation===e.top?i.clientY-t.offset.left:$(i.currentTarget).height()-i.clientY-t.offset.left}linq(t.panels).forEach(function(t){o(t)})}},t.endDrag=function(){linq(t.panels).forEach(function(t){t.dragging=!1})}}]),angular.module("DockControl").controller("PanelCtrl",["$scope","$alignment","$orientation",function(t,e,n){function o(){return t.orientation===n.left||t.orientation===n.right?e.horizontal:t.orientation===n.top||t.orientation===n.bottom?e.vertical:e.middle}this.toggleDock=function(){t.toggleDock()},this.toggleCollapse=function(){t.toggleCollapse()},this.setHeader=function(e){t.header=e},this.hasHeader=function(){return""!==t.header},t.toggleDock=function(){t.docked=!t.docked},t.$align=e,t.$orientation=n,t.docked=!1,t.collapsed=!1,t.dragging=!1,t.header="",t.align=o(t.orientation),t.orientation===n.center&&(t.align=e.middle),t.startDrag=function(){t.dragging=!0},t.panelExpand=function(){t.collapsed=!1},t.panelLeave=function(){t.docked||(t.collapsed=!0)},t.setToDefault=function(){t.left="",t.right="",t.top="",t.bottom=""},t.setStyle=function(){return{width:t.align===e.horizontal?t.size:"",height:t.align===e.vertical?t.size:"",left:t.left,right:t.right,top:t.top,bottom:t.bottom}}}]),angular.module("DockControl").directive("panel",["DockControl.PathService",function(t){return{restrict:"AE",require:"^dock",replace:!0,transclude:!0,scope:{size:"=",minSize:"=",index:"@",orientation:"@"},templateUrl:t.templatesBaseUrl+"panel.tmpl.html",controller:"PanelCtrl",link:function(t,e,n,o){o.addPanel(t),t.$watch("docked",function(e){void 0!==e&&o.panelDockedChanged(t)}),t.docked="true"===n.docked?!0:!1,t.toggleCollapse=function(){t.collapsed=!t.collapsed,o.panelCollapseChanged(t)}}}}]).directive("header",["DockControl.PathService",function(t){return{restrict:"AE",replace:!0,transclude:!0,require:"^panel",templateUrl:t.templatesBaseUrl+"header.tmpl.html",link:function(t,e,n,o){t.docked=!1,t.toggleDock=function(){o.toggleDock(),t.docked=!t.docked},t.toggleCollapse=function(){o.toggleCollapse()},o.setHeader(e.text())}}}]).directive("content",["DockControl.PathService",function(t){return{restrict:"AE",replace:!0,transclude:!0,require:"^panel",templateUrl:t.templatesBaseUrl+"content.tmpl.html",link:function(t,e,n,o){t.hasHeader=o.hasHeader()}}}]);var scripts=document.getElementsByTagName("script"),currentScriptPath=scripts[scripts.length-1].src,dockControlRootPath=currentScriptPath.split("js/")[0];angular.module("DockControl").service("DockControl.PathService",[function(){return{templatesBaseUrl:dockControlRootPath+"templates/"}}]);
//# sourceMappingURL=data:application/json;base64,